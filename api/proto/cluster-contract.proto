syntax = "proto3";

package raft_v1;

option go_package = "pkg/raft/raft_cluster_v1";
service ClusterNode {
    rpc SetElectionTimeout(Empty) returns (Empty);
    // Follower
    rpc LoadLog(LogInfo) returns (LogAccept);
    rpc SetLeader(LeadInfo) returns (LeadAccept);
    rpc ReciveHeartBeat(HeartBeatRequest) returns (HeartBeatResponse);
    
    // Lead
    rpc Append(LogLeadRequest) returns (Empty);
    
    // Candidate
    rpc StartElection(Empty) returns (ElectionDecision);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
}

message LogLeadRequest {
    string id = 1;
    string jsonString = 2;
}

message LogInfo {
    string id = 1;

    // In the Raft protocol, each node must store a term for each entry in its log
    int64 term = 2;
    int64 index = 3;
    string jsonString = 4;
}

message LogAccept {
    int64 term = 2;
}

message LeadInfo {
    int64 idLeader = 1;

    // we send term in all request and responses to controll sync with all nodes in cluster
    // if follower get a req with lower term - he ignored this req and responsed actual term
    int64 term = 2;
    repeated LogInfo logs = 3; 
}

message LeadAccept {
    int64 term = 2;
}

message ElectionDecision {
    int64 term = 2;
}

message RequestVoteRequest {
    int64 term = 1;
    int64 lastLogIndex = 2;
    int64 lastLogTerm = 3;
    int64 SenderId = 4;
}

message RequestVoteResponse {
    int64 term = 2;
}

message HeartBeatRequest {
    int64 term = 1;
    int64 leaderId = 2;

    // index - increment value ([index]logs)
    int64 prevLogIndex = 3;
    int64 prevLogTerm = 4;
}

message HeartBeatResponse {
    int64 term = 1;
}

message Empty {
}



